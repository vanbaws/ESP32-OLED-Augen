#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <random>
#include <chrono>

#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 32

#define OLED_RESET -1
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

int leftEyeX = 30;
int rightEyeX = 90;
int eyeY = SCREEN_HEIGHT / 2;
int eyeRadius = 8;
int pupilOffsetX = 0;
int pupilOffsetY = 0;
int pupilSize = eyeRadius / 2;
int eyebrowOffset = 0;
int targetPupilOffsetX = 0;
int targetPupilOffsetY = 0;
int targetPupilSize = eyeRadius / 2;
int targetEyebrowOffset = 0;
int animationCounter = 0;
bool isBlinking = false;
int blinkTimer = 0;

unsigned seed = std::chrono::system_clock::now().time_since_epoch().count();
std::default_random_engine generator(seed);
std::uniform_int_distribution<int> randomPupilOffset(-5, 5);
std::uniform_int_distribution<int> randomPupilSize(eyeRadius / 4, eyeRadius - 1);
std::uniform_int_distribution<int> randomDelay(200, 1000);
std::uniform_int_distribution<int> randomDirection(0, 3);
std::uniform_int_distribution<int> randomBlinkDelay(2000, 5000);

void setup() {
    Serial.begin(115200);

    if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
        Serial.println(F("SSD1306 allocation failed"));
        for (;;);
    }

    display.clearDisplay();
    display.setTextColor(WHITE);
    display.display();
}

void drawEyes() {
    if (isBlinking) {
        // Blinzelnde Augen
        display.drawFastHLine(leftEyeX - eyeRadius, eyeY, eyeRadius * 2, WHITE);
        display.drawFastHLine(rightEyeX - eyeRadius, eyeY, eyeRadius * 2, WHITE);
    } else {
        // Normale Augen
        display.drawFastHLine(leftEyeX - eyeRadius, eyeY - eyeRadius - 2 + eyebrowOffset, eyeRadius * 2, WHITE);
        display.drawFastHLine(rightEyeX - eyeRadius, eyeY - eyeRadius - 2 + eyebrowOffset, eyeRadius * 2, WHITE);

        display.drawCircle(leftEyeX, eyeY, eyeRadius, WHITE);
        display.fillCircle(leftEyeX + pupilOffsetX, eyeY + pupilOffsetY, pupilSize, WHITE);
        display.drawPixel(leftEyeX + pupilOffsetX - 2, eyeY + pupilOffsetY - 2, WHITE);

        display.drawCircle(rightEyeX, eyeY, eyeRadius, WHITE);
        display.fillCircle(rightEyeX + pupilOffsetX, eyeY + pupilOffsetY, pupilSize, WHITE);
        display.drawPixel(rightEyeX + pupilOffsetX - 2, eyeY + pupilOffsetY - 2, WHITE);
    }

    if (random() % 2 == 0) {
        display.drawFastHLine(SCREEN_WIDTH / 2 - 10, SCREEN_HEIGHT - 5, 20, WHITE);
    } else {
        display.drawRect(SCREEN_WIDTH / 2 - 10, SCREEN_HEIGHT - 7, 20, 5, WHITE);
    }
}

void moveEyesRandomly() {
    int direction = randomDirection(generator);
    int moveAmount = random() % 5;

    switch (direction) {
        case 0: // Links
            targetPupilOffsetX = -moveAmount;
            targetPupilOffsetY = 0;
            break;
        case 1: // Rechts
            targetPupilOffsetX = moveAmount;
            targetPupilOffsetY = 0;
            break;
        case 2: // Oben
            targetPupilOffsetX = 0;
            targetPupilOffsetY = -moveAmount;
            break;
        case 3: // Unten
            targetPupilOffsetX = 0;
            targetPupilOffsetY = moveAmount;
            break;
    }

    for (int i = 0; i < 10; i++) {
        pupilOffsetX += (targetPupilOffsetX - pupilOffsetX) / 10.0;
        pupilOffsetY += (targetPupilOffsetY - pupilOffsetY) / 10.0;
        display.clearDisplay();
        drawEyes();
        display.display();
        delay(15);
    }
}

void loop() {
    // Blinzeln
    if (blinkTimer > 0) {
        blinkTimer--;
        if (blinkTimer == 0) {
            isBlinking = false;
        }
    } else if (random() % 1000 < 5) { // Seltenes Auslösen
        isBlinking = true;
        blinkTimer = 2; // Kürzeres Blinzeln
    }

    // Zufällige Bewegungen
    if (random() % 2 == 0) {
        moveEyesRandomly();
    }

    // Zufällige Änderungen von Augenbrauen und Größe
    targetEyebrowOffset = randomPupilOffset(generator);
    targetPupilSize = randomPupilSize(generator);

    for (int i = 0; i < 5; i++) {
        eyebrowOffset += (targetEyebrowOffset - eyebrowOffset) / 5.0;
        pupilSize += (targetPupilSize - pupilSize) / 5.0;
        display.clearDisplay();
        drawEyes();
        display.display();
        delay(15);
    }

    // Zufällige Animationen
    switch (random() % 6) {
        case 0: // Schnelles Blinzeln
            if (!isBlinking) {
                isBlinking = true;
                blinkTimer = 3; // Noch kürzeres Blinzeln
            }
            break;
        case 1: // Auf- und Ab-Bewegung mit Augenbrauenbewegung
            for (int i = -3; i <= 3; i++) {
                eyeY += i;
                eyebrowOffset = -i;
                display.clearDisplay();
                drawEyes();
                display.display();
                eyeY = SCREEN_HEIGHT / 2;
                delay(30);
            }
            break;
        case 2: // Schnelle Pupillen- und Augenbrauenbewegung
            pupilOffsetX = randomPupilOffset(generator) * 3;
            pupilOffsetY = randomPupilOffset(generator) * 2;
            eyebrowOffset = randomPupilOffset(generator) * 2;
            display.clearDisplay();
            drawEyes();
            display.display();
            delay(60);
            break;
        case 3: // Augen werden kurz größer und kleiner
            pupilSize = eyeRadius;
            display.clearDisplay();
            drawEyes();
            display.display();
            delay(60);
            pupilSize = eyeRadius / 2;
            break;
        case 4: // Augen rollen
            for (int i = -eyeRadius; i <= eyeRadius; i++) {
                pupilOffsetX = i;
                pupilOffsetY = i;
                display.clearDisplay();
                drawEyes();
                display.display();
                delay(20);
            }
            pupilOffsetX = 0;
            pupilOffsetY = 0;
            break;
        case 5: // Blick nach oben und unten
            for (int i = -4; i <= 4; i++) {
                pupilOffsetY = i * 2;
                display.clearDisplay();
                drawEyes();
                display.display();
                delay(30);
            }
            pupilOffsetY = 0;
            break;
    }

    delay(randomDelay(generator));
}
